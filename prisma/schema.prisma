// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Profile {
  id           String         @id @default(uuid())
  firstName    String
  lastName     String
  username     String         @unique
  email        String         @unique
  bio          String         @default("")
  password     String
  profileImage String
  totalread    Int            @default(0)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now())
  Blog         Blog[]
  Social_Links Social_Links[]
  Activity     Activity[]
  Favourite    Favourite[]
}

model Social_Links {
  id        String  @id @default(uuid())
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String
  youtube   String
  instagram String
  facebook  String
  twitter   String
  github    String
  website   String
}

model Blog {
  id            String      @id @default(uuid())
  title         String
  banner        String
  description   String
  content       Json
  profile       Profile     @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId     String
  Tag           String[]
  like_count    Int         @default(0)
  comment_count Int         @default(0)
  read_count    Int         @default(0)
  draft         Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now())
  Activity      Activity[]
  Favourite     Favourite[]
}

model Activity {
  id        String  @id @default(uuid())
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String
  blog      Blog    @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId    String
}

model Favourite {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String
  blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId    String
}
